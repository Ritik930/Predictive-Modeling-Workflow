# -*- coding: utf-8 -*-
"""DV 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JTDfl_9nOFFYtI4k1JWhMZbs9opySqu_
"""

import pandas as pd

# Load the dataset
file_path = '/content/survey lung cancer.csv'
data = pd.read_csv(file_path)

# Inspect the dataset
print("Dataset Preview:")
print(data.head())
print("\nDataset Information:")
data.info()

# Check for missing values
missing_values = data.isnull().sum()
print("\nMissing Values in Each Column:")
print(missing_values)

# Handle missing values
data_cleaned = data.dropna()  # Drop rows with missing values
# Alternative: data.fillna(data.median(), inplace=True)

print("\nData after cleaning:")
print(data_cleaned.head())

import numpy as np

# Normalize numerical columns
numerical_columns = data_cleaned.select_dtypes(include=[np.number]).columns
data_cleaned[numerical_columns] = (data_cleaned[numerical_columns] - data_cleaned[numerical_columns].mean()) / data_cleaned[numerical_columns].std()

# Encode categorical variables
categorical_columns = data_cleaned.select_dtypes(include=['object']).columns
data_transformed = pd.get_dummies(data_cleaned, columns=categorical_columns, drop_first=True)

print("\nTransformed Dataset Preview:")
print(data_transformed.head())

# Save the transformed dataset for further use
data_transformed.to_csv('/content/transformed_dataset.csv', index=False)
print("\nTransformed dataset saved as 'transformed_dataset.csv'")

import matplotlib.pyplot as plt
import seaborn as sns

# Correlation heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(data_transformed.corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title("Correlation Heatmap")
plt.show()

# Distribution plot for the first numerical column
if len(numerical_columns) > 0:
    plt.figure(figsize=(8, 6))
    sns.histplot(data_cleaned[numerical_columns[0]], kde=True, bins=30)
    plt.title(f"Distribution of {numerical_columns[0]}")
    plt.xlabel(numerical_columns[0])
    plt.ylabel("Frequency")
    plt.show()

# Countplot for the first categorical column
if len(categorical_columns) > 0:
    plt.figure(figsize=(8, 6))
    sns.countplot(x=categorical_columns[0], data=data)
    plt.title(f"Countplot of {categorical_columns[0]}")
    plt.xlabel(categorical_columns[0])
    plt.ylabel("Count")
    plt.show()